{"mappings":"I,EEoKA,SAAS,gBAAgB,CAAC,mBAAoB,SAlItB,EAAA,EAmIJ,aAAa,OAAO,CAAC,mBAAqB,EAjI1D,AADuB,SAAS,cAAc,CAAC,kBAChC,WAAW,CAAG,CAAC,iBAAiB,EAAE,EAAA,CAAS,AAmI9D,GDvKA,MAAM,EAAa,SAAS,aAAa,CAAC,KAC1C,CAAA,EAAW,WAAW,CAAG,6BACzB,SAAS,cAAc,CAAC,QAAQ,WAAW,CAAC,GAI5C,SAAS,cAAc,CAAC,QAAQ,WAAW,CAAC,AAAA,CAAA,A,C,E,C,G,U,C,E,O,C,CAAA","sources":["<anon>","src/index.js","src/App.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $4c8cda5d2c6d1d8b$exports = {};\nlet $4c8cda5d2c6d1d8b$var$map;\nlet $4c8cda5d2c6d1d8b$var$marker;\n// Exported function to initialize the map\nasync function $4c8cda5d2c6d1d8b$var$initMap(lat, lon) {\n    const location = {\n        lat: lat,\n        lng: lon\n    };\n    $4c8cda5d2c6d1d8b$var$map = new google.maps.Map(document.getElementById('map'), {\n        center: location,\n        zoom: 12\n    });\n    $4c8cda5d2c6d1d8b$var$marker = new google.maps.Marker({\n        position: location,\n        map: $4c8cda5d2c6d1d8b$var$map\n    });\n}\n// Exported function to increment and display the API call counter\nfunction $4c8cda5d2c6d1d8b$var$incrementCounter() {\n    const currentDate = new Date().toDateString();\n    const storedDate = localStorage.getItem('apiCallDate');\n    let counter = localStorage.getItem('apiCallCounter');\n    if (storedDate !== currentDate) {\n        counter = 0; // Reset counter if the date has changed\n        localStorage.setItem('apiCallDate', currentDate);\n    }\n    counter = parseInt(counter) + 1;\n    localStorage.setItem('apiCallCounter', counter);\n    $4c8cda5d2c6d1d8b$var$displayCounter(counter);\n}\n// Exported function to display the counter value\nfunction $4c8cda5d2c6d1d8b$var$displayCounter(counter) {\n    const counterDisplay = document.getElementById('counterDisplay');\n    counterDisplay.textContent = `API calls today: ${counter}`;\n}\n// Exported function to fetch and display the weather data by city name\nasync function $4c8cda5d2c6d1d8b$var$getWeather() {\n    $4c8cda5d2c6d1d8b$var$incrementCounter(); // Increment the counter when the API is called\n    const location = document.getElementById('location').value;\n    const apiKey = '414566a386a08cff91c0b2692629a943';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=imperial`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.cod === 200) {\n        $4c8cda5d2c6d1d8b$var$displayWeather(data);\n        $4c8cda5d2c6d1d8b$var$getForecast(data.coord.lat, data.coord.lon); // Fetch forecast data based on coordinates\n        $4c8cda5d2c6d1d8b$var$displayPrecipitation(data); // Display precipitation data\n        $4c8cda5d2c6d1d8b$var$adjustWidth(); // Adjust the width of the weather container\n    } else alert(data.message);\n}\n// Exported function to fetch and display the weather data by current location\nasync function $4c8cda5d2c6d1d8b$var$getWeatherByLocation() {\n    $4c8cda5d2c6d1d8b$var$incrementCounter(); // Increment the counter when the API is called\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(async (position)=>{\n        const apiKey = '414566a386a08cff91c0b2692629a943';\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`;\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.cod === 200) {\n            $4c8cda5d2c6d1d8b$var$displayWeather(data);\n            $4c8cda5d2c6d1d8b$var$getForecast(lat, lon); // Fetch forecast data based on coordinates\n            $4c8cda5d2c6d1d8b$var$displayPrecipitation(data); // Display precipitation data\n            $4c8cda5d2c6d1d8b$var$adjustWidth(); // Adjust the width of the weather container\n            // Initialize the map with the user's location\n            $4c8cda5d2c6d1d8b$var$initMap(lat, lon);\n        } else alert(data.message);\n    });\n    else alert(\"Geolocation is not supported by this browser.\");\n}\n// Private function to fetch and display the weather data by latitude and longitude\nasync function $4c8cda5d2c6d1d8b$var$getWeatherByLatLon() {\n    $4c8cda5d2c6d1d8b$var$incrementCounter(); // Increment the counter when the API is called\n    const lat = document.getElementById('latitude').value;\n    const lon = document.getElementById('longitude').value;\n    const apiKey = '414566a386a08cff91c0b2692629a943';\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.cod === 200) {\n        $4c8cda5d2c6d1d8b$var$displayWeather(data);\n        $4c8cda5d2c6d1d8b$var$getForecast(lat, lon);\n        $4c8cda5d2c6d1d8b$var$displayPrecipitation(data);\n        $4c8cda5d2c6d1d8b$var$adjustWidth();\n    } else alert(data.message);\n}\n// Private function to display the weather data\nfunction $4c8cda5d2c6d1d8b$var$displayWeather(data) {\n    const result = document.getElementById('result');\n    const weatherInfo = `\n        <h2>${data.name}</h2>\n        <p>Temperature: ${data.main.temp} \\xb0F</p>\n        <p>Weather: ${data.weather[0].description}</p>\n        <p>Humidity: ${data.main.humidity}%</p>\n        <p>Wind Speed: ${data.wind.speed} mph</p>\n    `;\n    result.innerHTML = weatherInfo;\n    // Make location display visible\n    document.getElementById('locationDisplayContainer').classList.remove('hidden');\n    document.getElementById('locationDisplay').textContent = data.name;\n}\n// Private function to display the precipitation data\nfunction $4c8cda5d2c6d1d8b$var$displayPrecipitation(data) {\n    const precipitationContainer = document.getElementById('precipitation');\n    const precipitationInfo = `\n        <p>Precipitation: ${data.rain ? data.rain[\"1h\"] : 0} mm/h</p>\n        <p>Snow: ${data.snow ? data.snow[\"1h\"] : 0} mm/h</p>\n    `;\n    precipitationContainer.innerHTML = precipitationInfo;\n    // Make precipitation container visible\n    document.getElementById('precipitationContainer').classList.remove('hidden');\n}\n// Private function to fetch and display the forecast data\nasync function $4c8cda5d2c6d1d8b$var$getForecast(lat, lon) {\n    const apiKey = '414566a386a08cff91c0b2692629a943';\n    const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`;\n    const response = await fetch(url);\n    const data = await response.json();\n    const forecastContainer = document.getElementById('forecast');\n    forecastContainer.innerHTML = '';\n    data.list.slice(0, 5).forEach((forecast)=>{\n        const forecastDay = `\n            <div class=\"forecast-day\">\n                <p>${new Date(forecast.dt * 1000).toLocaleDateString()}</p>\n                <p>Temp: ${forecast.main.temp} \\xb0F</p>\n                <p>Weather: ${forecast.weather[0].description}</p>\n            </div>\n        `;\n        forecastContainer.innerHTML += forecastDay;\n    });\n    // Make forecast container visible\n    document.getElementById('forecastContainer').classList.remove('hidden');\n}\n// Private function to adjust the width of the weather container\nfunction $4c8cda5d2c6d1d8b$var$adjustWidth() {\n    const weatherContainer = document.getElementById('weather');\n    weatherContainer.style.width = 'auto'; // Adjust as needed\n}\n// Call displayCounter on page load to show the current counter value\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const counter = localStorage.getItem('apiCallCounter') || 0;\n    $4c8cda5d2c6d1d8b$var$displayCounter(counter);\n});\n// Private function to toggle tactical mode\nfunction $4c8cda5d2c6d1d8b$var$toggleTacticalMode() {\n    document.body.classList.toggle('tactical-mode');\n    document.getElementById('locationDisplayContainer').classList.toggle('tactical-mode');\n    document.getElementById('weather').classList.toggle('tactical-mode');\n    document.getElementById('forecastContainer').classList.toggle('tactical-mode');\n    document.getElementById('precipitationContainer').classList.toggle('tactical-mode');\n    document.getElementById('latLonInputs').classList.toggle('hidden');\n    const elements = document.querySelectorAll('h1, h2, h3, h4, p, button, input');\n    elements.forEach((element)=>element.classList.toggle('tactical-mode'));\n    // Toggle the button color\n    document.getElementById('tacticalModeToggle').classList.toggle('tactical-mode-button');\n    document.getElementById('getWeatherButton').classList.toggle('tactical-mode-button');\n    document.getElementById('getWeatherByLocationButton').classList.toggle('tactical-mode-button');\n    document.getElementById('getWeatherByLatLonButton').classList.toggle('tactical-mode-button');\n}\n\n\nconst $35da740d59af89ba$var$helloworld = document.createElement('h1');\n$35da740d59af89ba$var$helloworld.textContent = \"hello world, weather stuff\";\ndocument.getElementById('root').appendChild($35da740d59af89ba$var$helloworld);\ndocument.getElementById('root').appendChild((0, (/*@__PURE__*/$parcel$interopDefault($4c8cda5d2c6d1d8b$exports)))());\n\n\n//# sourceMappingURL=index.64737f51.js.map\n","const helloworld = document.createElement('h1');\r\nhelloworld.textContent = \"hello world, weather stuff\";\r\ndocument.getElementById('root').appendChild(helloworld);\r\n\r\nimport App from './App';\r\n\r\ndocument.getElementById('root').appendChild(App());\r\n\r\n","\r\nlet map;\r\nlet marker;\r\n\r\n// Exported function to initialize the map\r\nasync function initMap(lat, lon) {\r\n    const location = { lat: lat, lng: lon };\r\n    map = new google.maps.Map(document.getElementById('map'), {\r\n        center: location,\r\n        zoom: 12\r\n    });\r\n    marker = new google.maps.Marker({\r\n        position: location,\r\n        map: map\r\n    });\r\n}\r\n\r\n// Exported function to increment and display the API call counter\r\nfunction incrementCounter() {\r\n    const currentDate = new Date().toDateString();\r\n    const storedDate = localStorage.getItem('apiCallDate');\r\n    let counter = localStorage.getItem('apiCallCounter');\r\n\r\n    if (storedDate !== currentDate) {\r\n        counter = 0; // Reset counter if the date has changed\r\n        localStorage.setItem('apiCallDate', currentDate);\r\n    }\r\n\r\n    counter = parseInt(counter) + 1;\r\n    localStorage.setItem('apiCallCounter', counter);\r\n    displayCounter(counter);\r\n}\r\n\r\n// Exported function to display the counter value\r\nfunction displayCounter(counter) {\r\n    const counterDisplay = document.getElementById('counterDisplay');\r\n    counterDisplay.textContent = `API calls today: ${counter}`;\r\n}\r\n\r\n// Exported function to fetch and display the weather data by city name\r\nasync function getWeather() {\r\n    incrementCounter(); // Increment the counter when the API is called\r\n    const location = document.getElementById('location').value;\r\n    const apiKey = '414566a386a08cff91c0b2692629a943';\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=imperial`;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (data.cod === 200) {\r\n        displayWeather(data);\r\n        getForecast(data.coord.lat, data.coord.lon); // Fetch forecast data based on coordinates\r\n        displayPrecipitation(data); // Display precipitation data\r\n        adjustWidth(); // Adjust the width of the weather container\r\n    } else {\r\n        alert(data.message);\r\n    }\r\n}\r\n\r\n// Exported function to fetch and display the weather data by current location\r\nasync function getWeatherByLocation() {\r\n    incrementCounter(); // Increment the counter when the API is called\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(async (position) => {\r\n            const apiKey = '414566a386a08cff91c0b2692629a943';\r\n            const lat = position.coords.latitude;\r\n            const lon = position.coords.longitude;\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`;\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            if (data.cod === 200) {\r\n                displayWeather(data);\r\n                getForecast(lat, lon); // Fetch forecast data based on coordinates\r\n                displayPrecipitation(data); // Display precipitation data\r\n                adjustWidth(); // Adjust the width of the weather container\r\n                \r\n                // Initialize the map with the user's location\r\n                initMap(lat, lon);\r\n            } else {\r\n                alert(data.message);\r\n            }\r\n        });\r\n    } else {\r\n        alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n}\r\n\r\n// Private function to fetch and display the weather data by latitude and longitude\r\nasync function getWeatherByLatLon() {\r\n    incrementCounter(); // Increment the counter when the API is called\r\n    const lat = document.getElementById('latitude').value;\r\n    const lon = document.getElementById('longitude').value;\r\n    const apiKey = '414566a386a08cff91c0b2692629a943';\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (data.cod === 200) {\r\n        displayWeather(data);\r\n        getForecast(lat, lon);\r\n        displayPrecipitation(data);\r\n        adjustWidth();\r\n    } else {\r\n        alert(data.message);\r\n    }\r\n}\r\n// Private function to display the weather data\r\nfunction displayWeather(data) {\r\n    const result = document.getElementById('result');\r\n    const weatherInfo = `\r\n        <h2>${data.name}</h2>\r\n        <p>Temperature: ${data.main.temp} °F</p>\r\n        <p>Weather: ${data.weather[0].description}</p>\r\n        <p>Humidity: ${data.main.humidity}%</p>\r\n        <p>Wind Speed: ${data.wind.speed} mph</p>\r\n    `;\r\n    result.innerHTML = weatherInfo;\r\n\r\n    // Make location display visible\r\n    document.getElementById('locationDisplayContainer').classList.remove('hidden');\r\n    document.getElementById('locationDisplay').textContent = data.name;\r\n}\r\n\r\n// Private function to display the precipitation data\r\nfunction displayPrecipitation(data) {\r\n    const precipitationContainer = document.getElementById('precipitation');\r\n    const precipitationInfo = `\r\n        <p>Precipitation: ${data.rain ? data.rain[\"1h\"] : 0} mm/h</p>\r\n        <p>Snow: ${data.snow ? data.snow[\"1h\"] : 0} mm/h</p>\r\n    `;\r\n    precipitationContainer.innerHTML = precipitationInfo;\r\n\r\n    // Make precipitation container visible\r\n    document.getElementById('precipitationContainer').classList.remove('hidden');\r\n}\r\n\r\n// Private function to fetch and display the forecast data\r\nasync function getForecast(lat, lon) {\r\n    const apiKey = '414566a386a08cff91c0b2692629a943';\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const forecastContainer = document.getElementById('forecast');\r\n    forecastContainer.innerHTML = '';\r\n\r\n    data.list.slice(0, 5).forEach(forecast => {\r\n        const forecastDay = `\r\n            <div class=\"forecast-day\">\r\n                <p>${new Date(forecast.dt * 1000).toLocaleDateString()}</p>\r\n                <p>Temp: ${forecast.main.temp} °F</p>\r\n                <p>Weather: ${forecast.weather[0].description}</p>\r\n            </div>\r\n        `;\r\n        forecastContainer.innerHTML += forecastDay;\r\n    });\r\n\r\n    // Make forecast container visible\r\n    document.getElementById('forecastContainer').classList.remove('hidden');\r\n}\r\n\r\n// Private function to adjust the width of the weather container\r\nfunction adjustWidth() {\r\n    const weatherContainer = document.getElementById('weather');\r\n    weatherContainer.style.width = 'auto'; // Adjust as needed\r\n}\r\n\r\n// Call displayCounter on page load to show the current counter value\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const counter = localStorage.getItem('apiCallCounter') || 0;\r\n    displayCounter(counter);\r\n});\r\n\r\n// Private function to toggle tactical mode\r\nfunction toggleTacticalMode() {\r\n    document.body.classList.toggle('tactical-mode');\r\n    document.getElementById('locationDisplayContainer').classList.toggle('tactical-mode');\r\n    document.getElementById('weather').classList.toggle('tactical-mode');\r\n    document.getElementById('forecastContainer').classList.toggle('tactical-mode');\r\n    document.getElementById('precipitationContainer').classList.toggle('tactical-mode');\r\n    document.getElementById('latLonInputs').classList.toggle('hidden');\r\n\r\n    const elements = document.querySelectorAll('h1, h2, h3, h4, p, button, input');\r\n    elements.forEach((element) => element.classList.toggle('tactical-mode'));\r\n\r\n    // Toggle the button color\r\n    document.getElementById('tacticalModeToggle').classList.toggle('tactical-mode-button');\r\n    document.getElementById('getWeatherButton').classList.toggle('tactical-mode-button');\r\n    document.getElementById('getWeatherByLocationButton').classList.toggle('tactical-mode-button');\r\n    document.getElementById('getWeatherByLatLonButton').classList.toggle('tactical-mode-button');\r\n}\r\n"],"names":["a","document","addEventListener","counter","localStorage","getItem","counterDisplay","getElementById","textContent","$35da740d59af89ba$var$helloworld","createElement","appendChild","__esModule","default"],"version":3,"file":"index.64737f51.js.map"}